/* Lightweight Typed alternative - supports the subset used in the site (strings, typeSpeed, backSpeed, backDelay, loop, showCursor, cursorChar) */
(function(window){
	function Typed(selector, options){
		options = options || {};
		this.el = typeof selector === 'string' ? document.querySelector(selector) : selector;
		if(!this.el) return;
		this.strings = options.strings || [];
		this.typeSpeed = typeof options.typeSpeed === 'number' ? options.typeSpeed : 50;
		this.backSpeed = typeof options.backSpeed === 'number' ? options.backSpeed : 50;
		this.backDelay = typeof options.backDelay === 'number' ? options.backDelay : 700;
		this.loop = options.loop === true;
		this.showCursor = options.showCursor !== false;
		this.cursorChar = options.cursorChar || '|';
		this.startDelay = typeof options.startDelay === 'number' ? options.startDelay : 0;

		this.arrayPos = 0;
		this.strPos = 0;
		this.isDeleting = false;
		this.timeout = null;

		if(this.showCursor){
			this.cursor = document.createElement('span');
			this.cursor.className = 'typed-cursor';
			this.cursor.setAttribute('aria-hidden','true');
			this.cursor.textContent = this.cursorChar;
			if(this.el.parentNode) this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);
		}

		var self = this;
		setTimeout(function(){ self._tick(); }, this.startDelay);
	}

	Typed.prototype._tick = function(){
		var self = this;
		var current = this.strings[this.arrayPos] || '';

		if(this.isDeleting){
			if(this.strPos > 0){
				this.strPos--;
				this.el.textContent = current.substring(0, this.strPos);
				this.timeout = setTimeout(function(){ self._tick(); }, this.backSpeed);
			} else {
				this.isDeleting = false;
				this.arrayPos++;
				if(this.arrayPos >= this.strings.length){
					if(this.loop) this.arrayPos = 0;
					else return; // finished
				}
				this.timeout = setTimeout(function(){ self._tick(); }, 200);
			}
			return;
		}

		if(this.strPos < current.length){
			this.strPos++;
			this.el.textContent = current.substring(0, this.strPos);
			this.timeout = setTimeout(function(){ self._tick(); }, this.typeSpeed);
		} else {
			// finished typing current string
			if(this.loop || this.arrayPos < this.strings.length - 1){
				this.timeout = setTimeout(function(){ self.isDeleting = true; self._tick(); }, this.backDelay);
			}
		}
	};

	Typed.prototype.stop = function(){ clearTimeout(this.timeout); };
	Typed.prototype.start = function(){ var self=this; clearTimeout(this.timeout); this.timeout = setTimeout(function(){ self._tick(); }, 0); };
	Typed.prototype.reset = function(){ this.stop(); this.strPos = 0; this.arrayPos = 0; this.el.textContent = ''; };

	window.Typed = Typed;
})(window);